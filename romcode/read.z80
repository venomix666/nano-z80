; Routines for reading character input

; Parse a hex string, two nibbles
; HL: address of string
; E: output
parse_hex8:
        ld de,0
        ld b, 2
        jr parse_hex

; Parse a hex string, four nibbles
; HL: address of string
; DE: output
parse_hex16:
        ld de, 0
        ld b, 4
parse_hex:
        ld a,(hl)
        sub '0'
        ret c
        cp 10
        jr c, parse_hex_shift
        sub 7
        cp 16
        ret nc
parse_hex_shift:
        sla e
        rl d
        sla e
        rl d
        sla e
        rl d
        sla e
        rl d
        or e
        ld e,a
        inc hl
        djnz parse_hex
        ret


; Reads a character and coverts to uppercase, blocking
read_char_upper:
        call read_char
        ; Check if zero
        or a
        ret z
        ; Check if a contains a lowercase character
        cp 'a'
        ret c
        cp 'z'+1
        ret nc
        ; If lowercase, subtract 32
        sub 32
        ret

; Read a character, blocking
; Reads from both UART and USB keyboard
read_char:
        xor a
        call keyb_getkey
        ret c
        call uart_rx
        jr nc, read_char
        ret


; Read a character, non-blocking
; Carry set if character has been read
; Reads from both UART and USB keyboard
read_char_non_blocking:
        call uart_rx
        ret c
        call keyb_getkey
        ret

